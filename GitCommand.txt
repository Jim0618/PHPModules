查看本地机子的在Git上的名字和邮箱：
git config user.name
git config user.email

对所有仓库指定相同的用户名和Email地址：
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

创建版本库：
git init

添加文件到git仓库：
1.git add <file>
2.git commit -m <message>

时刻掌握仓库当前的状态,看看有没有准备提交的修改：
git status

上次怎么修改了文件：
git diff

很详细的历史记录：
git log
退出："：q"
git log --pretty=online 简化信息：版本号+当初提交的信息

HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，
上上一个版本就是HEAD^^，往上100个版本就是HEAD~100。

回退到上一个版本：
git reset --hard HEAD^

变成指定版本（回退或进化）：
git reset --hard <指定的任一commit id>
（版本号没必要写全，前几位就可以了，Git会自动去找。
当然也不能只写前一两位，因为Git可能会找到多个版本号，
就无法确定是哪一个了。）

记录每一次命令：
git reflog
(要重返未来，用git reflog查看命令历史，
以便确定要回到未来的哪个版本）

查看工作区和版本库里面最新版本的区别：
git diff HEAD -- <file>

丢弃工作区的修改(误删工作区文件可以用此命令恢复)：
git checkout -- <file>
(命令git checkout -- readme.txt意思就是，
把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，
现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，
现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit
或git add时的状态。)

把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset HEAD <file>

切换到另一分支：
git checkout <another>

从版本库删掉文件：
git rm

查看git版本：
Git --version

创建github仓库和本地同步：
git remote add origin git@github.com:yourname/yourrepository.git
git push -u origin master
(由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，
在以后的推送或者拉取时就可以简化命令: git push origin master)

把本地库的内容推送到远程(实际上是把当前分支master推送到远程):
git push origin master

克隆远程库到本地：
 git clone git@github.com:yourname/yourrepository.git

 创建分支并切换到该分支（-b）：
 git checkout -b <branch>

创建并切换分支：
git branch <branch>
git checkout <branch>

查看当前分支：
git branch

合并分支：
git merge <branch>

删除分支：
git branch -d <branch>

查看该文件在不同分支的情况：
cat <file>

合并分支产生冲突：
1.查看是哪些文件有冲突：git status
2.查看冲突文件并修改：cat <file>
3.在master分支上做提交

查看分支合并提交历史：
git log --graph --pretty=oneline --abbrev-commit
(用git log --graph命令可以看到分支合并图)




